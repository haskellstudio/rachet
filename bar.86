'(program
  (tmp.11011
   tmp.11027
   plus.11074
   vec.11033
   vec.11049
   plus.11072
   tmp.11012
   tmp.11028
   plus.11070
   vec.11034
   vref.11051
   plus.11068
   tmp.11013
   vref.11053
   plus.11066
   vec.11035
   vref.11055
   plus.11064
   tmp.11014
   vref.11057
   plus.11062
   vec.11036
   vref.11059
   plus.11060
   tmp.11015
   vref.11061
   plus.11058
   vec.11037
   vref.11063
   plus.11056
   tmp.11016
   vref.11065
   plus.11054
   vec.11038
   vref.11067
   plus.11052
   tmp.11017
   vref.11069
   plus.11050
   vec.11039
   vref.11071
   tmp.11018
   vref.11073
   vec.11040
   vref.11075
   tmp.11019
   vref.11077
   vec.11041
   vref.11079
   tmp.11020
   vref.11081
   vec.11042
   vref.11083
   tmp.11021
   vref.11085
   vec.11043
   vref.11087
   tmp.11022
   vref.11089
   vec.11044
   vref.11091
   tmp.11023
   plus.11090
   vec.11029
   vec.11045
   plus.11088
   tmp.11008
   tmp.11024
   plus.11086
   vec.11030
   vec.11046
   plus.11084
   tmp.11009
   tmp.11025
   plus.11082
   vec.11031
   vec.11047
   plus.11080
   tmp.11010
   tmp.11026
   plus.11078
   vec.11032
   vec.11048
   plus.11076
   void.11112
   void.11111
   void.11110
   void.11109
   void.11108
   void.11107
   void.11106
   void.11105
   void.11104
   void.11103
   void.11102
   void.11101
   void.11100
   void.11099
   void.11098
   void.11097
   void.11096
   void.11095
   void.11094
   void.11093
   void.11092
   rootstack.11113
   end-data.11174
   lt.11175
   rootstack.11176
   end-data.11171
   lt.11172
   rootstack.11173
   end-data.11168
   lt.11169
   rootstack.11170
   end-data.11165
   lt.11166
   rootstack.11167
   end-data.11162
   lt.11163
   rootstack.11164
   end-data.11159
   lt.11160
   rootstack.11161
   end-data.11156
   lt.11157
   rootstack.11158
   end-data.11153
   lt.11154
   rootstack.11155
   end-data.11150
   lt.11151
   rootstack.11152
   end-data.11147
   lt.11148
   rootstack.11149
   end-data.11144
   lt.11145
   rootstack.11146
   end-data.11141
   lt.11142
   rootstack.11143
   end-data.11138
   lt.11139
   rootstack.11140
   end-data.11135
   lt.11136
   rootstack.11137
   end-data.11132
   lt.11133
   rootstack.11134
   end-data.11129
   lt.11130
   rootstack.11131
   end-data.11126
   lt.11127
   rootstack.11128
   end-data.11123
   lt.11124
   rootstack.11125
   end-data.11120
   lt.11121
   rootstack.11122
   end-data.11117
   lt.11118
   rootstack.11119
   end-data.11114
   lt.11115
   rootstack.11116)
  (type Integer)
  (movq (int 8192) (reg rdi))
  (movq (int 65536) (reg rsi))
  (callq initialize)
  (movq (global-value rootstack_begin) (var rootstack.11113))
  (movq (global-value free_ptr) (var end-data.11174))
  (addq (int 16) (var end-data.11174))
  (cmpq (var end-data.11174) (global-value fromspace_end))
  (setl (byte-reg al))
  (movzbq (byte-reg al) (var lt.11175))
  (if (eq? (int 0) (var lt.11175))
    ()
    ((movq (var rootstack.11113) (var rootstack.11176))
     (addq (int 0) (var rootstack.11176))
     (movq (var rootstack.11176) (reg rdi))
     (movq (int 16) (reg rsi))
     (callq collect)))
  (movq (global-value free_ptr) (var vec.11029))
  (addq (int 16) (global-value free_ptr))
  (movq (int 3) (offset (var vec.11029) 0))
  (movq (int 1) (offset (var vec.11029) 8))
  (movq (var vec.11029) (var tmp.11008))
  (movq (global-value free_ptr) (var end-data.11171))
  (addq (int 16) (var end-data.11171))
  (cmpq (var end-data.11171) (global-value fromspace_end))
  (setl (byte-reg al))
  (movzbq (byte-reg al) (var lt.11172))
  (if (eq? (int 0) (var lt.11172))
    ()
    ((movq (var vec.11029) (offset (var rootstack.11113) 0))
     (movq (var rootstack.11113) (var rootstack.11173))
     (addq (int 1) (var rootstack.11173))
     (movq (var rootstack.11173) (reg rdi))
     (movq (int 16) (reg rsi))
     (callq collect)
     (movq (offset (var rootstack.11113) 0) (var vec.11029))))
  (movq (global-value free_ptr) (var vec.11030))
  (addq (int 16) (global-value free_ptr))
  (movq (int 3) (offset (var vec.11030) 0))
  (movq (int 1) (offset (var vec.11030) 8))
  (movq (var vec.11030) (var tmp.11009))
  (movq (global-value free_ptr) (var end-data.11168))
  (addq (int 16) (var end-data.11168))
  (cmpq (var end-data.11168) (global-value fromspace_end))
  (setl (byte-reg al))
  (movzbq (byte-reg al) (var lt.11169))
  (if (eq? (int 0) (var lt.11169))
    ()
    ((movq (var vec.11030) (offset (var rootstack.11113) 8))
     (movq (var vec.11029) (offset (var rootstack.11113) 0))
     (movq (var rootstack.11113) (var rootstack.11170))
     (addq (int 2) (var rootstack.11170))
     (movq (var rootstack.11170) (reg rdi))
     (movq (int 16) (reg rsi))
     (callq collect)
     (movq (offset (var rootstack.11113) 8) (var vec.11030))
     (movq (offset (var rootstack.11113) 0) (var vec.11029))))
  (movq (global-value free_ptr) (var vec.11031))
  (addq (int 16) (global-value free_ptr))
  (movq (int 3) (offset (var vec.11031) 0))
  (movq (int 1) (offset (var vec.11031) 8))
  (movq (var vec.11031) (var tmp.11010))
  (movq (global-value free_ptr) (var end-data.11165))
  (addq (int 16) (var end-data.11165))
  (cmpq (var end-data.11165) (global-value fromspace_end))
  (setl (byte-reg al))
  (movzbq (byte-reg al) (var lt.11166))
  (if (eq? (int 0) (var lt.11166))
    ()
    ((movq (var vec.11031) (offset (var rootstack.11113) 16))
     (movq (var vec.11030) (offset (var rootstack.11113) 8))
     (movq (var vec.11029) (offset (var rootstack.11113) 0))
     (movq (var rootstack.11113) (var rootstack.11167))
     (addq (int 3) (var rootstack.11167))
     (movq (var rootstack.11167) (reg rdi))
     (movq (int 16) (reg rsi))
     (callq collect)
     (movq (offset (var rootstack.11113) 16) (var vec.11031))
     (movq (offset (var rootstack.11113) 8) (var vec.11030))
     (movq (offset (var rootstack.11113) 0) (var vec.11029))))
  (movq (global-value free_ptr) (var vec.11032))
  (addq (int 16) (global-value free_ptr))
  (movq (int 3) (offset (var vec.11032) 0))
  (movq (int 1) (offset (var vec.11032) 8))
  (movq (var vec.11032) (var tmp.11011))
  (movq (global-value free_ptr) (var end-data.11162))
  (addq (int 16) (var end-data.11162))
  (cmpq (var end-data.11162) (global-value fromspace_end))
  (setl (byte-reg al))
  (movzbq (byte-reg al) (var lt.11163))
  (if (eq? (int 0) (var lt.11163))
    ()
    ((movq (var vec.11032) (offset (var rootstack.11113) 24))
     (movq (var vec.11031) (offset (var rootstack.11113) 16))
     (movq (var vec.11030) (offset (var rootstack.11113) 8))
     (movq (var vec.11029) (offset (var rootstack.11113) 0))
     (movq (var rootstack.11113) (var rootstack.11164))
     (addq (int 4) (var rootstack.11164))
     (movq (var rootstack.11164) (reg rdi))
     (movq (int 16) (reg rsi))
     (callq collect)
     (movq (offset (var rootstack.11113) 24) (var vec.11032))
     (movq (offset (var rootstack.11113) 16) (var vec.11031))
     (movq (offset (var rootstack.11113) 8) (var vec.11030))
     (movq (offset (var rootstack.11113) 0) (var vec.11029))))
  (movq (global-value free_ptr) (var vec.11033))
  (addq (int 16) (global-value free_ptr))
  (movq (int 3) (offset (var vec.11033) 0))
  (movq (int 1) (offset (var vec.11033) 8))
  (movq (var vec.11033) (var tmp.11012))
  (movq (global-value free_ptr) (var end-data.11159))
  (addq (int 16) (var end-data.11159))
  (cmpq (var end-data.11159) (global-value fromspace_end))
  (setl (byte-reg al))
  (movzbq (byte-reg al) (var lt.11160))
  (if (eq? (int 0) (var lt.11160))
    ()
    ((movq (var vec.11033) (offset (var rootstack.11113) 32))
     (movq (var vec.11032) (offset (var rootstack.11113) 24))
     (movq (var vec.11031) (offset (var rootstack.11113) 16))
     (movq (var vec.11030) (offset (var rootstack.11113) 8))
     (movq (var vec.11029) (offset (var rootstack.11113) 0))
     (movq (var rootstack.11113) (var rootstack.11161))
     (addq (int 5) (var rootstack.11161))
     (movq (var rootstack.11161) (reg rdi))
     (movq (int 16) (reg rsi))
     (callq collect)
     (movq (offset (var rootstack.11113) 32) (var vec.11033))
     (movq (offset (var rootstack.11113) 24) (var vec.11032))
     (movq (offset (var rootstack.11113) 16) (var vec.11031))
     (movq (offset (var rootstack.11113) 8) (var vec.11030))
     (movq (offset (var rootstack.11113) 0) (var vec.11029))))
  (movq (global-value free_ptr) (var vec.11034))
  (addq (int 16) (global-value free_ptr))
  (movq (int 3) (offset (var vec.11034) 0))
  (movq (int 1) (offset (var vec.11034) 8))
  (movq (var vec.11034) (var tmp.11013))
  (movq (global-value free_ptr) (var end-data.11156))
  (addq (int 16) (var end-data.11156))
  (cmpq (var end-data.11156) (global-value fromspace_end))
  (setl (byte-reg al))
  (movzbq (byte-reg al) (var lt.11157))
  (if (eq? (int 0) (var lt.11157))
    ()
    ((movq (var vec.11034) (offset (var rootstack.11113) 40))
     (movq (var vec.11033) (offset (var rootstack.11113) 32))
     (movq (var vec.11032) (offset (var rootstack.11113) 24))
     (movq (var vec.11031) (offset (var rootstack.11113) 16))
     (movq (var vec.11030) (offset (var rootstack.11113) 8))
     (movq (var vec.11029) (offset (var rootstack.11113) 0))
     (movq (var rootstack.11113) (var rootstack.11158))
     (addq (int 6) (var rootstack.11158))
     (movq (var rootstack.11158) (reg rdi))
     (movq (int 16) (reg rsi))
     (callq collect)
     (movq (offset (var rootstack.11113) 40) (var vec.11034))
     (movq (offset (var rootstack.11113) 32) (var vec.11033))
     (movq (offset (var rootstack.11113) 24) (var vec.11032))
     (movq (offset (var rootstack.11113) 16) (var vec.11031))
     (movq (offset (var rootstack.11113) 8) (var vec.11030))
     (movq (offset (var rootstack.11113) 0) (var vec.11029))))
  (movq (global-value free_ptr) (var vec.11035))
  (addq (int 16) (global-value free_ptr))
  (movq (int 3) (offset (var vec.11035) 0))
  (movq (int 1) (offset (var vec.11035) 8))
  (movq (var vec.11035) (var tmp.11014))
  (movq (global-value free_ptr) (var end-data.11153))
  (addq (int 16) (var end-data.11153))
  (cmpq (var end-data.11153) (global-value fromspace_end))
  (setl (byte-reg al))
  (movzbq (byte-reg al) (var lt.11154))
  (if (eq? (int 0) (var lt.11154))
    ()
    ((movq (var vec.11035) (offset (var rootstack.11113) 48))
     (movq (var vec.11034) (offset (var rootstack.11113) 40))
     (movq (var vec.11033) (offset (var rootstack.11113) 32))
     (movq (var vec.11032) (offset (var rootstack.11113) 24))
     (movq (var vec.11031) (offset (var rootstack.11113) 16))
     (movq (var vec.11030) (offset (var rootstack.11113) 8))
     (movq (var vec.11029) (offset (var rootstack.11113) 0))
     (movq (var rootstack.11113) (var rootstack.11155))
     (addq (int 7) (var rootstack.11155))
     (movq (var rootstack.11155) (reg rdi))
     (movq (int 16) (reg rsi))
     (callq collect)
     (movq (offset (var rootstack.11113) 48) (var vec.11035))
     (movq (offset (var rootstack.11113) 40) (var vec.11034))
     (movq (offset (var rootstack.11113) 32) (var vec.11033))
     (movq (offset (var rootstack.11113) 24) (var vec.11032))
     (movq (offset (var rootstack.11113) 16) (var vec.11031))
     (movq (offset (var rootstack.11113) 8) (var vec.11030))
     (movq (offset (var rootstack.11113) 0) (var vec.11029))))
  (movq (global-value free_ptr) (var vec.11036))
  (addq (int 16) (global-value free_ptr))
  (movq (int 3) (offset (var vec.11036) 0))
  (movq (int 1) (offset (var vec.11036) 8))
  (movq (var vec.11036) (var tmp.11015))
  (movq (global-value free_ptr) (var end-data.11150))
  (addq (int 16) (var end-data.11150))
  (cmpq (var end-data.11150) (global-value fromspace_end))
  (setl (byte-reg al))
  (movzbq (byte-reg al) (var lt.11151))
  (if (eq? (int 0) (var lt.11151))
    ()
    ((movq (var vec.11036) (offset (var rootstack.11113) 56))
     (movq (var vec.11035) (offset (var rootstack.11113) 48))
     (movq (var vec.11034) (offset (var rootstack.11113) 40))
     (movq (var vec.11033) (offset (var rootstack.11113) 32))
     (movq (var vec.11032) (offset (var rootstack.11113) 24))
     (movq (var vec.11031) (offset (var rootstack.11113) 16))
     (movq (var vec.11030) (offset (var rootstack.11113) 8))
     (movq (var vec.11029) (offset (var rootstack.11113) 0))
     (movq (var rootstack.11113) (var rootstack.11152))
     (addq (int 8) (var rootstack.11152))
     (movq (var rootstack.11152) (reg rdi))
     (movq (int 16) (reg rsi))
     (callq collect)
     (movq (offset (var rootstack.11113) 56) (var vec.11036))
     (movq (offset (var rootstack.11113) 48) (var vec.11035))
     (movq (offset (var rootstack.11113) 40) (var vec.11034))
     (movq (offset (var rootstack.11113) 32) (var vec.11033))
     (movq (offset (var rootstack.11113) 24) (var vec.11032))
     (movq (offset (var rootstack.11113) 16) (var vec.11031))
     (movq (offset (var rootstack.11113) 8) (var vec.11030))
     (movq (offset (var rootstack.11113) 0) (var vec.11029))))
  (movq (global-value free_ptr) (var vec.11037))
  (addq (int 16) (global-value free_ptr))
  (movq (int 3) (offset (var vec.11037) 0))
  (movq (int 1) (offset (var vec.11037) 8))
  (movq (var vec.11037) (var tmp.11016))
  (movq (global-value free_ptr) (var end-data.11147))
  (addq (int 16) (var end-data.11147))
  (cmpq (var end-data.11147) (global-value fromspace_end))
  (setl (byte-reg al))
  (movzbq (byte-reg al) (var lt.11148))
  (if (eq? (int 0) (var lt.11148))
    ()
    ((movq (var vec.11037) (offset (var rootstack.11113) 64))
     (movq (var vec.11036) (offset (var rootstack.11113) 56))
     (movq (var vec.11035) (offset (var rootstack.11113) 48))
     (movq (var vec.11034) (offset (var rootstack.11113) 40))
     (movq (var vec.11033) (offset (var rootstack.11113) 32))
     (movq (var vec.11032) (offset (var rootstack.11113) 24))
     (movq (var vec.11031) (offset (var rootstack.11113) 16))
     (movq (var vec.11030) (offset (var rootstack.11113) 8))
     (movq (var vec.11029) (offset (var rootstack.11113) 0))
     (movq (var rootstack.11113) (var rootstack.11149))
     (addq (int 9) (var rootstack.11149))
     (movq (var rootstack.11149) (reg rdi))
     (movq (int 16) (reg rsi))
     (callq collect)
     (movq (offset (var rootstack.11113) 64) (var vec.11037))
     (movq (offset (var rootstack.11113) 56) (var vec.11036))
     (movq (offset (var rootstack.11113) 48) (var vec.11035))
     (movq (offset (var rootstack.11113) 40) (var vec.11034))
     (movq (offset (var rootstack.11113) 32) (var vec.11033))
     (movq (offset (var rootstack.11113) 24) (var vec.11032))
     (movq (offset (var rootstack.11113) 16) (var vec.11031))
     (movq (offset (var rootstack.11113) 8) (var vec.11030))
     (movq (offset (var rootstack.11113) 0) (var vec.11029))))
  (movq (global-value free_ptr) (var vec.11038))
  (addq (int 16) (global-value free_ptr))
  (movq (int 3) (offset (var vec.11038) 0))
  (movq (int 1) (offset (var vec.11038) 8))
  (movq (var vec.11038) (var tmp.11017))
  (movq (global-value free_ptr) (var end-data.11144))
  (addq (int 16) (var end-data.11144))
  (cmpq (var end-data.11144) (global-value fromspace_end))
  (setl (byte-reg al))
  (movzbq (byte-reg al) (var lt.11145))
  (if (eq? (int 0) (var lt.11145))
    ()
    ((movq (var vec.11038) (offset (var rootstack.11113) 72))
     (movq (var vec.11037) (offset (var rootstack.11113) 64))
     (movq (var vec.11036) (offset (var rootstack.11113) 56))
     (movq (var vec.11035) (offset (var rootstack.11113) 48))
     (movq (var vec.11034) (offset (var rootstack.11113) 40))
     (movq (var vec.11033) (offset (var rootstack.11113) 32))
     (movq (var vec.11032) (offset (var rootstack.11113) 24))
     (movq (var vec.11031) (offset (var rootstack.11113) 16))
     (movq (var vec.11030) (offset (var rootstack.11113) 8))
     (movq (var vec.11029) (offset (var rootstack.11113) 0))
     (movq (var rootstack.11113) (var rootstack.11146))
     (addq (int 10) (var rootstack.11146))
     (movq (var rootstack.11146) (reg rdi))
     (movq (int 16) (reg rsi))
     (callq collect)
     (movq (offset (var rootstack.11113) 72) (var vec.11038))
     (movq (offset (var rootstack.11113) 64) (var vec.11037))
     (movq (offset (var rootstack.11113) 56) (var vec.11036))
     (movq (offset (var rootstack.11113) 48) (var vec.11035))
     (movq (offset (var rootstack.11113) 40) (var vec.11034))
     (movq (offset (var rootstack.11113) 32) (var vec.11033))
     (movq (offset (var rootstack.11113) 24) (var vec.11032))
     (movq (offset (var rootstack.11113) 16) (var vec.11031))
     (movq (offset (var rootstack.11113) 8) (var vec.11030))
     (movq (offset (var rootstack.11113) 0) (var vec.11029))))
  (movq (global-value free_ptr) (var vec.11039))
  (addq (int 16) (global-value free_ptr))
  (movq (int 3) (offset (var vec.11039) 0))
  (movq (int 1) (offset (var vec.11039) 8))
  (movq (var vec.11039) (var tmp.11018))
  (movq (global-value free_ptr) (var end-data.11141))
  (addq (int 16) (var end-data.11141))
  (cmpq (var end-data.11141) (global-value fromspace_end))
  (setl (byte-reg al))
  (movzbq (byte-reg al) (var lt.11142))
  (if (eq? (int 0) (var lt.11142))
    ()
    ((movq (var vec.11039) (offset (var rootstack.11113) 80))
     (movq (var vec.11038) (offset (var rootstack.11113) 72))
     (movq (var vec.11037) (offset (var rootstack.11113) 64))
     (movq (var vec.11036) (offset (var rootstack.11113) 56))
     (movq (var vec.11035) (offset (var rootstack.11113) 48))
     (movq (var vec.11034) (offset (var rootstack.11113) 40))
     (movq (var vec.11033) (offset (var rootstack.11113) 32))
     (movq (var vec.11032) (offset (var rootstack.11113) 24))
     (movq (var vec.11031) (offset (var rootstack.11113) 16))
     (movq (var vec.11030) (offset (var rootstack.11113) 8))
     (movq (var vec.11029) (offset (var rootstack.11113) 0))
     (movq (var rootstack.11113) (var rootstack.11143))
     (addq (int 11) (var rootstack.11143))
     (movq (var rootstack.11143) (reg rdi))
     (movq (int 16) (reg rsi))
     (callq collect)
     (movq (offset (var rootstack.11113) 80) (var vec.11039))
     (movq (offset (var rootstack.11113) 72) (var vec.11038))
     (movq (offset (var rootstack.11113) 64) (var vec.11037))
     (movq (offset (var rootstack.11113) 56) (var vec.11036))
     (movq (offset (var rootstack.11113) 48) (var vec.11035))
     (movq (offset (var rootstack.11113) 40) (var vec.11034))
     (movq (offset (var rootstack.11113) 32) (var vec.11033))
     (movq (offset (var rootstack.11113) 24) (var vec.11032))
     (movq (offset (var rootstack.11113) 16) (var vec.11031))
     (movq (offset (var rootstack.11113) 8) (var vec.11030))
     (movq (offset (var rootstack.11113) 0) (var vec.11029))))
  (movq (global-value free_ptr) (var vec.11040))
  (addq (int 16) (global-value free_ptr))
  (movq (int 3) (offset (var vec.11040) 0))
  (movq (int 1) (offset (var vec.11040) 8))
  (movq (var vec.11040) (var tmp.11019))
  (movq (global-value free_ptr) (var end-data.11138))
  (addq (int 16) (var end-data.11138))
  (cmpq (var end-data.11138) (global-value fromspace_end))
  (setl (byte-reg al))
  (movzbq (byte-reg al) (var lt.11139))
  (if (eq? (int 0) (var lt.11139))
    ()
    ((movq (var vec.11040) (offset (var rootstack.11113) 88))
     (movq (var vec.11039) (offset (var rootstack.11113) 80))
     (movq (var vec.11038) (offset (var rootstack.11113) 72))
     (movq (var vec.11037) (offset (var rootstack.11113) 64))
     (movq (var vec.11036) (offset (var rootstack.11113) 56))
     (movq (var vec.11035) (offset (var rootstack.11113) 48))
     (movq (var vec.11034) (offset (var rootstack.11113) 40))
     (movq (var vec.11033) (offset (var rootstack.11113) 32))
     (movq (var vec.11032) (offset (var rootstack.11113) 24))
     (movq (var vec.11031) (offset (var rootstack.11113) 16))
     (movq (var vec.11030) (offset (var rootstack.11113) 8))
     (movq (var vec.11029) (offset (var rootstack.11113) 0))
     (movq (var rootstack.11113) (var rootstack.11140))
     (addq (int 12) (var rootstack.11140))
     (movq (var rootstack.11140) (reg rdi))
     (movq (int 16) (reg rsi))
     (callq collect)
     (movq (offset (var rootstack.11113) 88) (var vec.11040))
     (movq (offset (var rootstack.11113) 80) (var vec.11039))
     (movq (offset (var rootstack.11113) 72) (var vec.11038))
     (movq (offset (var rootstack.11113) 64) (var vec.11037))
     (movq (offset (var rootstack.11113) 56) (var vec.11036))
     (movq (offset (var rootstack.11113) 48) (var vec.11035))
     (movq (offset (var rootstack.11113) 40) (var vec.11034))
     (movq (offset (var rootstack.11113) 32) (var vec.11033))
     (movq (offset (var rootstack.11113) 24) (var vec.11032))
     (movq (offset (var rootstack.11113) 16) (var vec.11031))
     (movq (offset (var rootstack.11113) 8) (var vec.11030))
     (movq (offset (var rootstack.11113) 0) (var vec.11029))))
  (movq (global-value free_ptr) (var vec.11041))
  (addq (int 16) (global-value free_ptr))
  (movq (int 3) (offset (var vec.11041) 0))
  (movq (int 1) (offset (var vec.11041) 8))
  (movq (var vec.11041) (var tmp.11020))
  (movq (global-value free_ptr) (var end-data.11135))
  (addq (int 16) (var end-data.11135))
  (cmpq (var end-data.11135) (global-value fromspace_end))
  (setl (byte-reg al))
  (movzbq (byte-reg al) (var lt.11136))
  (if (eq? (int 0) (var lt.11136))
    ()
    ((movq (var vec.11041) (offset (var rootstack.11113) 96))
     (movq (var vec.11040) (offset (var rootstack.11113) 88))
     (movq (var vec.11039) (offset (var rootstack.11113) 80))
     (movq (var vec.11038) (offset (var rootstack.11113) 72))
     (movq (var vec.11037) (offset (var rootstack.11113) 64))
     (movq (var vec.11036) (offset (var rootstack.11113) 56))
     (movq (var vec.11035) (offset (var rootstack.11113) 48))
     (movq (var vec.11034) (offset (var rootstack.11113) 40))
     (movq (var vec.11033) (offset (var rootstack.11113) 32))
     (movq (var vec.11032) (offset (var rootstack.11113) 24))
     (movq (var vec.11031) (offset (var rootstack.11113) 16))
     (movq (var vec.11030) (offset (var rootstack.11113) 8))
     (movq (var vec.11029) (offset (var rootstack.11113) 0))
     (movq (var rootstack.11113) (var rootstack.11137))
     (addq (int 13) (var rootstack.11137))
     (movq (var rootstack.11137) (reg rdi))
     (movq (int 16) (reg rsi))
     (callq collect)
     (movq (offset (var rootstack.11113) 96) (var vec.11041))
     (movq (offset (var rootstack.11113) 88) (var vec.11040))
     (movq (offset (var rootstack.11113) 80) (var vec.11039))
     (movq (offset (var rootstack.11113) 72) (var vec.11038))
     (movq (offset (var rootstack.11113) 64) (var vec.11037))
     (movq (offset (var rootstack.11113) 56) (var vec.11036))
     (movq (offset (var rootstack.11113) 48) (var vec.11035))
     (movq (offset (var rootstack.11113) 40) (var vec.11034))
     (movq (offset (var rootstack.11113) 32) (var vec.11033))
     (movq (offset (var rootstack.11113) 24) (var vec.11032))
     (movq (offset (var rootstack.11113) 16) (var vec.11031))
     (movq (offset (var rootstack.11113) 8) (var vec.11030))
     (movq (offset (var rootstack.11113) 0) (var vec.11029))))
  (movq (global-value free_ptr) (var vec.11042))
  (addq (int 16) (global-value free_ptr))
  (movq (int 3) (offset (var vec.11042) 0))
  (movq (int 1) (offset (var vec.11042) 8))
  (movq (var vec.11042) (var tmp.11021))
  (movq (global-value free_ptr) (var end-data.11132))
  (addq (int 16) (var end-data.11132))
  (cmpq (var end-data.11132) (global-value fromspace_end))
  (setl (byte-reg al))
  (movzbq (byte-reg al) (var lt.11133))
  (if (eq? (int 0) (var lt.11133))
    ()
    ((movq (var vec.11042) (offset (var rootstack.11113) 104))
     (movq (var vec.11041) (offset (var rootstack.11113) 96))
     (movq (var vec.11040) (offset (var rootstack.11113) 88))
     (movq (var vec.11039) (offset (var rootstack.11113) 80))
     (movq (var vec.11038) (offset (var rootstack.11113) 72))
     (movq (var vec.11037) (offset (var rootstack.11113) 64))
     (movq (var vec.11036) (offset (var rootstack.11113) 56))
     (movq (var vec.11035) (offset (var rootstack.11113) 48))
     (movq (var vec.11034) (offset (var rootstack.11113) 40))
     (movq (var vec.11033) (offset (var rootstack.11113) 32))
     (movq (var vec.11032) (offset (var rootstack.11113) 24))
     (movq (var vec.11031) (offset (var rootstack.11113) 16))
     (movq (var vec.11030) (offset (var rootstack.11113) 8))
     (movq (var vec.11029) (offset (var rootstack.11113) 0))
     (movq (var rootstack.11113) (var rootstack.11134))
     (addq (int 14) (var rootstack.11134))
     (movq (var rootstack.11134) (reg rdi))
     (movq (int 16) (reg rsi))
     (callq collect)
     (movq (offset (var rootstack.11113) 104) (var vec.11042))
     (movq (offset (var rootstack.11113) 96) (var vec.11041))
     (movq (offset (var rootstack.11113) 88) (var vec.11040))
     (movq (offset (var rootstack.11113) 80) (var vec.11039))
     (movq (offset (var rootstack.11113) 72) (var vec.11038))
     (movq (offset (var rootstack.11113) 64) (var vec.11037))
     (movq (offset (var rootstack.11113) 56) (var vec.11036))
     (movq (offset (var rootstack.11113) 48) (var vec.11035))
     (movq (offset (var rootstack.11113) 40) (var vec.11034))
     (movq (offset (var rootstack.11113) 32) (var vec.11033))
     (movq (offset (var rootstack.11113) 24) (var vec.11032))
     (movq (offset (var rootstack.11113) 16) (var vec.11031))
     (movq (offset (var rootstack.11113) 8) (var vec.11030))
     (movq (offset (var rootstack.11113) 0) (var vec.11029))))
  (movq (global-value free_ptr) (var vec.11043))
  (addq (int 16) (global-value free_ptr))
  (movq (int 3) (offset (var vec.11043) 0))
  (movq (int 1) (offset (var vec.11043) 8))
  (movq (var vec.11043) (var tmp.11022))
  (movq (global-value free_ptr) (var end-data.11129))
  (addq (int 16) (var end-data.11129))
  (cmpq (var end-data.11129) (global-value fromspace_end))
  (setl (byte-reg al))
  (movzbq (byte-reg al) (var lt.11130))
  (if (eq? (int 0) (var lt.11130))
    ()
    ((movq (var vec.11043) (offset (var rootstack.11113) 112))
     (movq (var vec.11042) (offset (var rootstack.11113) 104))
     (movq (var vec.11041) (offset (var rootstack.11113) 96))
     (movq (var vec.11040) (offset (var rootstack.11113) 88))
     (movq (var vec.11039) (offset (var rootstack.11113) 80))
     (movq (var vec.11038) (offset (var rootstack.11113) 72))
     (movq (var vec.11037) (offset (var rootstack.11113) 64))
     (movq (var vec.11036) (offset (var rootstack.11113) 56))
     (movq (var vec.11035) (offset (var rootstack.11113) 48))
     (movq (var vec.11034) (offset (var rootstack.11113) 40))
     (movq (var vec.11033) (offset (var rootstack.11113) 32))
     (movq (var vec.11032) (offset (var rootstack.11113) 24))
     (movq (var vec.11031) (offset (var rootstack.11113) 16))
     (movq (var vec.11030) (offset (var rootstack.11113) 8))
     (movq (var vec.11029) (offset (var rootstack.11113) 0))
     (movq (var rootstack.11113) (var rootstack.11131))
     (addq (int 15) (var rootstack.11131))
     (movq (var rootstack.11131) (reg rdi))
     (movq (int 16) (reg rsi))
     (callq collect)
     (movq (offset (var rootstack.11113) 112) (var vec.11043))
     (movq (offset (var rootstack.11113) 104) (var vec.11042))
     (movq (offset (var rootstack.11113) 96) (var vec.11041))
     (movq (offset (var rootstack.11113) 88) (var vec.11040))
     (movq (offset (var rootstack.11113) 80) (var vec.11039))
     (movq (offset (var rootstack.11113) 72) (var vec.11038))
     (movq (offset (var rootstack.11113) 64) (var vec.11037))
     (movq (offset (var rootstack.11113) 56) (var vec.11036))
     (movq (offset (var rootstack.11113) 48) (var vec.11035))
     (movq (offset (var rootstack.11113) 40) (var vec.11034))
     (movq (offset (var rootstack.11113) 32) (var vec.11033))
     (movq (offset (var rootstack.11113) 24) (var vec.11032))
     (movq (offset (var rootstack.11113) 16) (var vec.11031))
     (movq (offset (var rootstack.11113) 8) (var vec.11030))
     (movq (offset (var rootstack.11113) 0) (var vec.11029))))
  (movq (global-value free_ptr) (var vec.11044))
  (addq (int 16) (global-value free_ptr))
  (movq (int 3) (offset (var vec.11044) 0))
  (movq (int 1) (offset (var vec.11044) 8))
  (movq (var vec.11044) (var tmp.11023))
  (movq (global-value free_ptr) (var end-data.11126))
  (addq (int 16) (var end-data.11126))
  (cmpq (var end-data.11126) (global-value fromspace_end))
  (setl (byte-reg al))
  (movzbq (byte-reg al) (var lt.11127))
  (if (eq? (int 0) (var lt.11127))
    ()
    ((movq (var vec.11044) (offset (var rootstack.11113) 120))
     (movq (var vec.11043) (offset (var rootstack.11113) 112))
     (movq (var vec.11042) (offset (var rootstack.11113) 104))
     (movq (var vec.11041) (offset (var rootstack.11113) 96))
     (movq (var vec.11040) (offset (var rootstack.11113) 88))
     (movq (var vec.11039) (offset (var rootstack.11113) 80))
     (movq (var vec.11038) (offset (var rootstack.11113) 72))
     (movq (var vec.11037) (offset (var rootstack.11113) 64))
     (movq (var vec.11036) (offset (var rootstack.11113) 56))
     (movq (var vec.11035) (offset (var rootstack.11113) 48))
     (movq (var vec.11034) (offset (var rootstack.11113) 40))
     (movq (var vec.11033) (offset (var rootstack.11113) 32))
     (movq (var vec.11032) (offset (var rootstack.11113) 24))
     (movq (var vec.11031) (offset (var rootstack.11113) 16))
     (movq (var vec.11030) (offset (var rootstack.11113) 8))
     (movq (var vec.11029) (offset (var rootstack.11113) 0))
     (movq (var rootstack.11113) (var rootstack.11128))
     (addq (int 16) (var rootstack.11128))
     (movq (var rootstack.11128) (reg rdi))
     (movq (int 16) (reg rsi))
     (callq collect)
     (movq (offset (var rootstack.11113) 120) (var vec.11044))
     (movq (offset (var rootstack.11113) 112) (var vec.11043))
     (movq (offset (var rootstack.11113) 104) (var vec.11042))
     (movq (offset (var rootstack.11113) 96) (var vec.11041))
     (movq (offset (var rootstack.11113) 88) (var vec.11040))
     (movq (offset (var rootstack.11113) 80) (var vec.11039))
     (movq (offset (var rootstack.11113) 72) (var vec.11038))
     (movq (offset (var rootstack.11113) 64) (var vec.11037))
     (movq (offset (var rootstack.11113) 56) (var vec.11036))
     (movq (offset (var rootstack.11113) 48) (var vec.11035))
     (movq (offset (var rootstack.11113) 40) (var vec.11034))
     (movq (offset (var rootstack.11113) 32) (var vec.11033))
     (movq (offset (var rootstack.11113) 24) (var vec.11032))
     (movq (offset (var rootstack.11113) 16) (var vec.11031))
     (movq (offset (var rootstack.11113) 8) (var vec.11030))
     (movq (offset (var rootstack.11113) 0) (var vec.11029))))
  (movq (global-value free_ptr) (var vec.11045))
  (addq (int 16) (global-value free_ptr))
  (movq (int 3) (offset (var vec.11045) 0))
  (movq (int 1) (offset (var vec.11045) 8))
  (movq (var vec.11045) (var tmp.11024))
  (movq (global-value free_ptr) (var end-data.11123))
  (addq (int 16) (var end-data.11123))
  (cmpq (var end-data.11123) (global-value fromspace_end))
  (setl (byte-reg al))
  (movzbq (byte-reg al) (var lt.11124))
  (if (eq? (int 0) (var lt.11124))
    ()
    ((movq (var vec.11045) (offset (var rootstack.11113) 128))
     (movq (var vec.11044) (offset (var rootstack.11113) 120))
     (movq (var vec.11043) (offset (var rootstack.11113) 112))
     (movq (var vec.11042) (offset (var rootstack.11113) 104))
     (movq (var vec.11041) (offset (var rootstack.11113) 96))
     (movq (var vec.11040) (offset (var rootstack.11113) 88))
     (movq (var vec.11039) (offset (var rootstack.11113) 80))
     (movq (var vec.11038) (offset (var rootstack.11113) 72))
     (movq (var vec.11037) (offset (var rootstack.11113) 64))
     (movq (var vec.11036) (offset (var rootstack.11113) 56))
     (movq (var vec.11035) (offset (var rootstack.11113) 48))
     (movq (var vec.11034) (offset (var rootstack.11113) 40))
     (movq (var vec.11033) (offset (var rootstack.11113) 32))
     (movq (var vec.11032) (offset (var rootstack.11113) 24))
     (movq (var vec.11031) (offset (var rootstack.11113) 16))
     (movq (var vec.11030) (offset (var rootstack.11113) 8))
     (movq (var vec.11029) (offset (var rootstack.11113) 0))
     (movq (var rootstack.11113) (var rootstack.11125))
     (addq (int 17) (var rootstack.11125))
     (movq (var rootstack.11125) (reg rdi))
     (movq (int 16) (reg rsi))
     (callq collect)
     (movq (offset (var rootstack.11113) 128) (var vec.11045))
     (movq (offset (var rootstack.11113) 120) (var vec.11044))
     (movq (offset (var rootstack.11113) 112) (var vec.11043))
     (movq (offset (var rootstack.11113) 104) (var vec.11042))
     (movq (offset (var rootstack.11113) 96) (var vec.11041))
     (movq (offset (var rootstack.11113) 88) (var vec.11040))
     (movq (offset (var rootstack.11113) 80) (var vec.11039))
     (movq (offset (var rootstack.11113) 72) (var vec.11038))
     (movq (offset (var rootstack.11113) 64) (var vec.11037))
     (movq (offset (var rootstack.11113) 56) (var vec.11036))
     (movq (offset (var rootstack.11113) 48) (var vec.11035))
     (movq (offset (var rootstack.11113) 40) (var vec.11034))
     (movq (offset (var rootstack.11113) 32) (var vec.11033))
     (movq (offset (var rootstack.11113) 24) (var vec.11032))
     (movq (offset (var rootstack.11113) 16) (var vec.11031))
     (movq (offset (var rootstack.11113) 8) (var vec.11030))
     (movq (offset (var rootstack.11113) 0) (var vec.11029))))
  (movq (global-value free_ptr) (var vec.11046))
  (addq (int 16) (global-value free_ptr))
  (movq (int 3) (offset (var vec.11046) 0))
  (movq (int 1) (offset (var vec.11046) 8))
  (movq (var vec.11046) (var tmp.11025))
  (movq (global-value free_ptr) (var end-data.11120))
  (addq (int 16) (var end-data.11120))
  (cmpq (var end-data.11120) (global-value fromspace_end))
  (setl (byte-reg al))
  (movzbq (byte-reg al) (var lt.11121))
  (if (eq? (int 0) (var lt.11121))
    ()
    ((movq (var vec.11046) (offset (var rootstack.11113) 136))
     (movq (var vec.11045) (offset (var rootstack.11113) 128))
     (movq (var vec.11044) (offset (var rootstack.11113) 120))
     (movq (var vec.11043) (offset (var rootstack.11113) 112))
     (movq (var vec.11042) (offset (var rootstack.11113) 104))
     (movq (var vec.11041) (offset (var rootstack.11113) 96))
     (movq (var vec.11040) (offset (var rootstack.11113) 88))
     (movq (var vec.11039) (offset (var rootstack.11113) 80))
     (movq (var vec.11038) (offset (var rootstack.11113) 72))
     (movq (var vec.11037) (offset (var rootstack.11113) 64))
     (movq (var vec.11036) (offset (var rootstack.11113) 56))
     (movq (var vec.11035) (offset (var rootstack.11113) 48))
     (movq (var vec.11034) (offset (var rootstack.11113) 40))
     (movq (var vec.11033) (offset (var rootstack.11113) 32))
     (movq (var vec.11032) (offset (var rootstack.11113) 24))
     (movq (var vec.11031) (offset (var rootstack.11113) 16))
     (movq (var vec.11030) (offset (var rootstack.11113) 8))
     (movq (var vec.11029) (offset (var rootstack.11113) 0))
     (movq (var rootstack.11113) (var rootstack.11122))
     (addq (int 18) (var rootstack.11122))
     (movq (var rootstack.11122) (reg rdi))
     (movq (int 16) (reg rsi))
     (callq collect)
     (movq (offset (var rootstack.11113) 136) (var vec.11046))
     (movq (offset (var rootstack.11113) 128) (var vec.11045))
     (movq (offset (var rootstack.11113) 120) (var vec.11044))
     (movq (offset (var rootstack.11113) 112) (var vec.11043))
     (movq (offset (var rootstack.11113) 104) (var vec.11042))
     (movq (offset (var rootstack.11113) 96) (var vec.11041))
     (movq (offset (var rootstack.11113) 88) (var vec.11040))
     (movq (offset (var rootstack.11113) 80) (var vec.11039))
     (movq (offset (var rootstack.11113) 72) (var vec.11038))
     (movq (offset (var rootstack.11113) 64) (var vec.11037))
     (movq (offset (var rootstack.11113) 56) (var vec.11036))
     (movq (offset (var rootstack.11113) 48) (var vec.11035))
     (movq (offset (var rootstack.11113) 40) (var vec.11034))
     (movq (offset (var rootstack.11113) 32) (var vec.11033))
     (movq (offset (var rootstack.11113) 24) (var vec.11032))
     (movq (offset (var rootstack.11113) 16) (var vec.11031))
     (movq (offset (var rootstack.11113) 8) (var vec.11030))
     (movq (offset (var rootstack.11113) 0) (var vec.11029))))
  (movq (global-value free_ptr) (var vec.11047))
  (addq (int 16) (global-value free_ptr))
  (movq (int 3) (offset (var vec.11047) 0))
  (movq (int 1) (offset (var vec.11047) 8))
  (movq (var vec.11047) (var tmp.11026))
  (movq (global-value free_ptr) (var end-data.11117))
  (addq (int 16) (var end-data.11117))
  (cmpq (var end-data.11117) (global-value fromspace_end))
  (setl (byte-reg al))
  (movzbq (byte-reg al) (var lt.11118))
  (if (eq? (int 0) (var lt.11118))
    ()
    ((movq (var vec.11047) (offset (var rootstack.11113) 144))
     (movq (var vec.11046) (offset (var rootstack.11113) 136))
     (movq (var vec.11045) (offset (var rootstack.11113) 128))
     (movq (var vec.11044) (offset (var rootstack.11113) 120))
     (movq (var vec.11043) (offset (var rootstack.11113) 112))
     (movq (var vec.11042) (offset (var rootstack.11113) 104))
     (movq (var vec.11041) (offset (var rootstack.11113) 96))
     (movq (var vec.11040) (offset (var rootstack.11113) 88))
     (movq (var vec.11039) (offset (var rootstack.11113) 80))
     (movq (var vec.11038) (offset (var rootstack.11113) 72))
     (movq (var vec.11037) (offset (var rootstack.11113) 64))
     (movq (var vec.11036) (offset (var rootstack.11113) 56))
     (movq (var vec.11035) (offset (var rootstack.11113) 48))
     (movq (var vec.11034) (offset (var rootstack.11113) 40))
     (movq (var vec.11033) (offset (var rootstack.11113) 32))
     (movq (var vec.11032) (offset (var rootstack.11113) 24))
     (movq (var vec.11031) (offset (var rootstack.11113) 16))
     (movq (var vec.11030) (offset (var rootstack.11113) 8))
     (movq (var vec.11029) (offset (var rootstack.11113) 0))
     (movq (var rootstack.11113) (var rootstack.11119))
     (addq (int 19) (var rootstack.11119))
     (movq (var rootstack.11119) (reg rdi))
     (movq (int 16) (reg rsi))
     (callq collect)
     (movq (offset (var rootstack.11113) 144) (var vec.11047))
     (movq (offset (var rootstack.11113) 136) (var vec.11046))
     (movq (offset (var rootstack.11113) 128) (var vec.11045))
     (movq (offset (var rootstack.11113) 120) (var vec.11044))
     (movq (offset (var rootstack.11113) 112) (var vec.11043))
     (movq (offset (var rootstack.11113) 104) (var vec.11042))
     (movq (offset (var rootstack.11113) 96) (var vec.11041))
     (movq (offset (var rootstack.11113) 88) (var vec.11040))
     (movq (offset (var rootstack.11113) 80) (var vec.11039))
     (movq (offset (var rootstack.11113) 72) (var vec.11038))
     (movq (offset (var rootstack.11113) 64) (var vec.11037))
     (movq (offset (var rootstack.11113) 56) (var vec.11036))
     (movq (offset (var rootstack.11113) 48) (var vec.11035))
     (movq (offset (var rootstack.11113) 40) (var vec.11034))
     (movq (offset (var rootstack.11113) 32) (var vec.11033))
     (movq (offset (var rootstack.11113) 24) (var vec.11032))
     (movq (offset (var rootstack.11113) 16) (var vec.11031))
     (movq (offset (var rootstack.11113) 8) (var vec.11030))
     (movq (offset (var rootstack.11113) 0) (var vec.11029))))
  (movq (global-value free_ptr) (var vec.11048))
  (addq (int 16) (global-value free_ptr))
  (movq (int 3) (offset (var vec.11048) 0))
  (movq (int 1) (offset (var vec.11048) 8))
  (movq (var vec.11048) (var tmp.11027))
  (movq (global-value free_ptr) (var end-data.11114))
  (addq (int 16) (var end-data.11114))
  (cmpq (var end-data.11114) (global-value fromspace_end))
  (setl (byte-reg al))
  (movzbq (byte-reg al) (var lt.11115))
  (if (eq? (int 0) (var lt.11115))
    ()
    ((movq (var vec.11048) (offset (var rootstack.11113) 152))
     (movq (var vec.11047) (offset (var rootstack.11113) 144))
     (movq (var vec.11046) (offset (var rootstack.11113) 136))
     (movq (var vec.11045) (offset (var rootstack.11113) 128))
     (movq (var vec.11044) (offset (var rootstack.11113) 120))
     (movq (var vec.11043) (offset (var rootstack.11113) 112))
     (movq (var vec.11042) (offset (var rootstack.11113) 104))
     (movq (var vec.11041) (offset (var rootstack.11113) 96))
     (movq (var vec.11040) (offset (var rootstack.11113) 88))
     (movq (var vec.11039) (offset (var rootstack.11113) 80))
     (movq (var vec.11038) (offset (var rootstack.11113) 72))
     (movq (var vec.11037) (offset (var rootstack.11113) 64))
     (movq (var vec.11036) (offset (var rootstack.11113) 56))
     (movq (var vec.11035) (offset (var rootstack.11113) 48))
     (movq (var vec.11034) (offset (var rootstack.11113) 40))
     (movq (var vec.11033) (offset (var rootstack.11113) 32))
     (movq (var vec.11032) (offset (var rootstack.11113) 24))
     (movq (var vec.11031) (offset (var rootstack.11113) 16))
     (movq (var vec.11030) (offset (var rootstack.11113) 8))
     (movq (var vec.11029) (offset (var rootstack.11113) 0))
     (movq (var rootstack.11113) (var rootstack.11116))
     (addq (int 20) (var rootstack.11116))
     (movq (var rootstack.11116) (reg rdi))
     (movq (int 16) (reg rsi))
     (callq collect)
     (movq (offset (var rootstack.11113) 152) (var vec.11048))
     (movq (offset (var rootstack.11113) 144) (var vec.11047))
     (movq (offset (var rootstack.11113) 136) (var vec.11046))
     (movq (offset (var rootstack.11113) 128) (var vec.11045))
     (movq (offset (var rootstack.11113) 120) (var vec.11044))
     (movq (offset (var rootstack.11113) 112) (var vec.11043))
     (movq (offset (var rootstack.11113) 104) (var vec.11042))
     (movq (offset (var rootstack.11113) 96) (var vec.11041))
     (movq (offset (var rootstack.11113) 88) (var vec.11040))
     (movq (offset (var rootstack.11113) 80) (var vec.11039))
     (movq (offset (var rootstack.11113) 72) (var vec.11038))
     (movq (offset (var rootstack.11113) 64) (var vec.11037))
     (movq (offset (var rootstack.11113) 56) (var vec.11036))
     (movq (offset (var rootstack.11113) 48) (var vec.11035))
     (movq (offset (var rootstack.11113) 40) (var vec.11034))
     (movq (offset (var rootstack.11113) 32) (var vec.11033))
     (movq (offset (var rootstack.11113) 24) (var vec.11032))
     (movq (offset (var rootstack.11113) 16) (var vec.11031))
     (movq (offset (var rootstack.11113) 8) (var vec.11030))
     (movq (offset (var rootstack.11113) 0) (var vec.11029))))
  (movq (global-value free_ptr) (var vec.11049))
  (addq (int 16) (global-value free_ptr))
  (movq (int 3) (offset (var vec.11049) 0))
  (movq (int 1) (offset (var vec.11049) 8))
  (movq (var vec.11049) (var tmp.11028))
  (movq (offset (var tmp.11008) 8) (var vref.11051))
  (movq (offset (var tmp.11009) 8) (var vref.11053))
  (movq (offset (var tmp.11010) 8) (var vref.11055))
  (movq (offset (var tmp.11011) 8) (var vref.11057))
  (movq (offset (var tmp.11012) 8) (var vref.11059))
  (movq (offset (var tmp.11013) 8) (var vref.11061))
  (movq (offset (var tmp.11014) 8) (var vref.11063))
  (movq (offset (var tmp.11015) 8) (var vref.11065))
  (movq (offset (var tmp.11016) 8) (var vref.11067))
  (movq (offset (var tmp.11017) 8) (var vref.11069))
  (movq (offset (var tmp.11018) 8) (var vref.11071))
  (movq (offset (var tmp.11019) 8) (var vref.11073))
  (movq (offset (var tmp.11020) 8) (var vref.11075))
  (movq (offset (var tmp.11021) 8) (var vref.11077))
  (movq (offset (var tmp.11022) 8) (var vref.11079))
  (movq (offset (var tmp.11023) 8) (var vref.11081))
  (movq (offset (var tmp.11024) 8) (var vref.11083))
  (movq (offset (var tmp.11025) 8) (var vref.11085))
  (movq (offset (var tmp.11026) 8) (var vref.11087))
  (movq (offset (var tmp.11027) 8) (var vref.11089))
  (movq (offset (var tmp.11028) 8) (var vref.11091))
  (movq (int 21) (var plus.11090))
  (addq (var vref.11091) (var plus.11090))
  (movq (var plus.11090) (var plus.11088))
  (addq (var vref.11089) (var plus.11088))
  (movq (var plus.11088) (var plus.11086))
  (addq (var vref.11087) (var plus.11086))
  (movq (var plus.11086) (var plus.11084))
  (addq (var vref.11085) (var plus.11084))
  (movq (var plus.11084) (var plus.11082))
  (addq (var vref.11083) (var plus.11082))
  (movq (var plus.11082) (var plus.11080))
  (addq (var vref.11081) (var plus.11080))
  (movq (var plus.11080) (var plus.11078))
  (addq (var vref.11079) (var plus.11078))
  (movq (var plus.11078) (var plus.11076))
  (addq (var vref.11077) (var plus.11076))
  (movq (var plus.11076) (var plus.11074))
  (addq (var vref.11075) (var plus.11074))
  (movq (var plus.11074) (var plus.11072))
  (addq (var vref.11073) (var plus.11072))
  (movq (var plus.11072) (var plus.11070))
  (addq (var vref.11071) (var plus.11070))
  (movq (var plus.11070) (var plus.11068))
  (addq (var vref.11069) (var plus.11068))
  (movq (var plus.11068) (var plus.11066))
  (addq (var vref.11067) (var plus.11066))
  (movq (var plus.11066) (var plus.11064))
  (addq (var vref.11065) (var plus.11064))
  (movq (var plus.11064) (var plus.11062))
  (addq (var vref.11063) (var plus.11062))
  (movq (var plus.11062) (var plus.11060))
  (addq (var vref.11061) (var plus.11060))
  (movq (var plus.11060) (var plus.11058))
  (addq (var vref.11059) (var plus.11058))
  (movq (var plus.11058) (var plus.11056))
  (addq (var vref.11057) (var plus.11056))
  (movq (var plus.11056) (var plus.11054))
  (addq (var vref.11055) (var plus.11054))
  (movq (var plus.11054) (var plus.11052))
  (addq (var vref.11053) (var plus.11052))
  (movq (var plus.11052) (var plus.11050))
  (addq (var vref.11051) (var plus.11050))
  (movq (var plus.11050) (reg rax)))
#<void>
